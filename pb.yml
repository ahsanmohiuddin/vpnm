---
- hosts: routers
  tasks:

    - name: "SETFACT >> Store running config for quick reference"
      set_fact:
        FIB_CMD_LIST: []

    - name: "IOS >> Wipe route targets"
      ios_config:
        src: "wipe_rt.j2"
      notify: "wait"

    - name: "IOS >> Apply VPN config"
      ios_config:
        src: "vpn.j2"
      notify: "wait"

    - name: "SETFACT >> Build FIB command list"
      set_fact:
        FIB_CMD_LIST: "{{ FIB_CMD_LIST }} + ['{{ FIB_CMD }}']"
      vars:
        FIB_CMD: "show ip cef vrf {{ item.name }} | exclude drop"
      with_items: "{{ vrfs }}"
      loop_control:
        label: "{{ item.name }}/{{ item.rd }}"

    - meta: flush_handlers

    - name: "IOS >> Capture FIB for all VRFs"
      ios_command:
        commands: "{{ FIB_CMD_LIST }}"
      register: VRF_FIB

    - name: "ASSERT >> Ensure present route is present"
      assert:
        that: "item.0.check.present in item.1"
      with_together:
        - "{{ vrfs }}"
        - "{{ VRF_FIB.stdout }}"
      loop_control:
        label: "{{ item.0.name }}/{{ item.0.check.present }}"

    - name: "ASSERT >> Ensure absent route is absent"
      assert:
        that: "item.0.check.absent not in item.1"
      with_together:
        - "{{ vrfs }}"
        - "{{ VRF_FIB.stdout }}"
      loop_control:
        label: "{{ item.0.name }}/{{ item.0.check.absent }}"

    - name: "IOS >> Ping first (lowest) IP in the present route network"
      ios_ping:
        dest: "{{ TARGET }}"
        vrf: "{{ item.name }}"
      vars:
        TARGET: "{{ item.check.present | ipaddr('1') | ipaddr('address') }}"
      with_items: "{{ vrfs }}"
      loop_control:
        label: "{{ item.name }} --> {{ TARGET }}"

  handlers:
    - name: "PAUSE >> Wait for VPN route convergence"
      listen: "wait"
      pause:
        seconds: 15
...
